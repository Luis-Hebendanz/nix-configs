
"*****************************************************************************
"" Functions
"*****************************************************************************

function! GetBufferList()
    redir =>buflist
    silent! ls!
    redir END
    return buflist
endfunction

" To be able to toggle quickfixlist
function! ToggleList(bufname, pfx)
    let buflist = GetBufferList()
    for bufnum in map(filter(split(buflist, '\n'), 'v:val =~ "'.a:bufname.'"'), 'str2nr(matchstr(v:val, "\\d\\+"))')
        if bufwinnr(bufnum) != -1
            exec(a:pfx.'close')
            return
        endif
    endfor
    if a:pfx == 'l' && len(getloclist(0)) == 0
        echohl ErrorMsg
        echo "Location List is Empty."
        return
    endif
    let winnr = winnr()
    exec(a:pfx.'open')
    if winnr() != winnr
        wincmd p
    endif
endfunction

" Function to wrap .txt files over lines
" correctly
if !exists('*s:setupWrapping')
  function s:setupWrapping()
    set wrap
    set wm=2
    set textwidth=79
  endfunction
endif

"*****************************************************************************
"" Basic Setup
"*****************************************************************************"
"" Encoding
set encoding=utf-8
set fileencoding=utf-8
set fileencodings=utf-8

" Make auto build systems detect changes to the file
set backupcopy=yes

" Use persistent history.
let undo_dir_path = '$HOME/.cache/nvim_undo'
if !isdirectory(expand(undo_dir_path))
    call mkdir(expand(undo_dir_path), "", 0700)
endif
let &undodir=expand(undo_dir_path)
set undofile

"" Fix backspace indent
set backspace=indent,eol,start

"" Tabs. May be overridden by autocmd rules
set tabstop=4
set softtabstop=0
set shiftwidth=4
set expandtab

"" Map leader to ,
let mapleader=','

"" Enable hidden buffers
set hidden

"" Searching
set hlsearch
set incsearch
set ignorecase
set smartcase

set fileformats=unix,dos,mac

if exists('$SHELL')
    set shell=$SHELL
else
    set shell=/bin/sh
endif

" Disable marker for line length
set colorcolumn=0

" " session management
" let g:session_directory = "~/.config/nvim/session"
" let g:session_autoload = "no"
" let g:session_autosave = "no"
" let g:session_command_aliases = 1

" IndentLine
let g:indentLine_enabled = 1
let g:indentLine_concealcursor = 0
let g:indentLine_char = 'â”†'
let g:indentLine_faster = 1
" Disable hiding of quotes ` under cursor
let g:indentLine_setConceal = 1
let g:indentLine_fileTypeExclude  = ['json', 'markdown']

"" Disable the blinking cursor.
set gcr=a:blinkon0
set scrolloff=3

"" Status bar
set laststatus=2

"" Use modeline overrides
set modeline
set modelines=10

set title
set titleold="Terminal"
set titlestring=%F

" On paranthesis matching define color
hi MatchParen cterm=bold ctermbg=none ctermfg=LightCyan

set statusline=%F%m%r%h%w%=(%{&ff}/%Y)\ (line\ %l\/%L,\ col\ %c)\

" Search mappings: These will make it so that going to the next one in a
" search will center on the line it's found in.
nnoremap n nzzzv
nnoremap N Nzzzv

if exists("*fugitive#statusline")
  set statusline+=%{fugitive#statusline()}
endif

" vim-airline
let g:airline_theme = 'luna'
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tagbar#enabled = 1
let g:airline_skip_empty_sections = 1
let g:airline#extensions#ale#enabled = 1
let g:airline#extensions#virtualenv#enabled = 1
" Disable showing buffers in tabline
let g:airline#extensions#tabline#show_buffers = 0

" Syntax highlight
" Default highlight is better than polyglot
let g:polyglot_disabled = ['python']
let python_highlight_all = 1

" typescript
let g:yats_host_keyword = 1

"*****************************************************************************
"" Abbreviations
"*****************************************************************************
"" no one is really happy until you have this shortcuts
cnoreabbrev W! w!
cnoreabbrev Q! q!
cnoreabbrev Qall! qall!
cnoreabbrev Wq wq
cnoreabbrev Wa wa
cnoreabbrev wQ wq
cnoreabbrev WQ wq
cnoreabbrev W w
cnoreabbrev Q q
cnoreabbrev Qall qall

"*****************************************************************************
"" Commands
"*****************************************************************************
" remove trailing whitespaces
command! FixWhitespace :%s/\s\+$//e

"*****************************************************************************
"" Autocmd Rules
"*****************************************************************************

augroup vimrc-sync-fromstart
  autocmd!
  autocmd BufEnter * :syntax sync maxlines=200
augroup END

"" Remember cursor position
augroup vimrc-remember-cursor-position
  autocmd!
  autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
augroup END

"" txt
augroup vimrc-wrapping
  autocmd!
  autocmd BufRead,BufNewFile *.txt call s:setupWrapping()
augroup END

"" make/cmake
augroup vimrc-make-cmake
  autocmd!
  autocmd FileType make setlocal noexpandtab
  autocmd BufNewFile,BufRead CMakeLists.txt setlocal filetype=cmake
augroup END

" c
autocmd FileType c setlocal tabstop=2 shiftwidth=2 expandtab
autocmd FileType cpp setlocal tabstop=2 shiftwidth=2 expandtab

" html
" for html files, 2 spaces
autocmd Filetype html setlocal ts=2 sw=2 expandtab

" python
" vim-python
augroup vimrc-python
  autocmd!
  autocmd FileType python setlocal expandtab shiftwidth=4 tabstop=8
      \ formatoptions+=croq softtabstop=4
      \ cinwords=if,elif,else,for,while,try,except,finally,def,class,with
augroup END


" Typescript
autocmd FileType typescript.tsx setlocal shiftwidth=2 softtabstop=2

" Nasm filetype
augroup nasm
    autocmd!
    autocmd BufRead,BufNewFile *.nasm set ft=nasm
augroup END

" fasm filetype
augroup fasm
    au!
    au BufReadPost *.fasm set ft=fasm
augroup END

" Regularly execute checktime to update buffers
" when file on disk has changed
if ! exists("g:CheckUpdateStarted")
    let g:CheckUpdateStarted=1
    call timer_start(1,'CheckUpdate')
endif
function! CheckUpdate(timer)
    silent! checktime
    call timer_start(1000,'CheckUpdate')
endfunction

"*****************************************************************************
"" Mappings
"*****************************************************************************

"" Split
noremap <Leader>h :<C-u>split<CR>
noremap <Leader>v :<C-u>vsplit<CR>

"" Git
noremap <Leader>ga :Gwrite<CR>
noremap <Leader>gc :Gcommit<CR>
noremap <Leader>gsh :Gpush<CR>
noremap <Leader>gll :Gpull<CR>
noremap <Leader>gs :Gstatus<CR>
noremap <Leader>gb :Gblame<CR>
noremap <Leader>gd :Gvdiff<CR>
noremap <Leader>gr :Gremove<CR>

" session management
nnoremap <leader>so :OpenSession<Space>
nnoremap <leader>ss :SaveSession<Space>
nnoremap <leader>sd :DeleteSession<CR>
nnoremap <leader>sc :CloseSession<CR>

"" Tabs
nnoremap <Tab> gt
nnoremap <S-Tab> gT
nnoremap <silent> <S-t> :tabnew<CR>

"" Set working directory
nnoremap <leader>. :lcd %:p:h<CR>

"" Opens an edit command with the path of the currently edited file filled in
noremap <Leader>e :e <C-R>=expand("%:p:h") . "/" <CR>

"" Opens a tab edit command with the path of the currently edited file filled
noremap <Leader>te :tabe <C-R>=expand("%:p:h") . "/" <CR>

"" fzf.vim
set wildmode=list:longest,list:full
set wildignore+=*.o,*.obj,.git,*.rbc,*.pyc,__pycache__
let $FZF_DEFAULT_COMMAND =  "find * -path '*/\.*' -prune -o -path 'node_modules/**' -prune -o -path 'target/**' -prune -o -path 'dist/**' -prune -o  -type f -print -o -type l -print 2> /dev/null"

nnoremap <silent> <leader>b :Buffers<CR>
nnoremap <silent> <leader># :FZF -m<CR>
"Recovery commands from history through FZF
nmap <leader>y :History:<CR>

" Tagbar
nmap <silent> <F3> :TagbarToggle<CR>
let g:tagbar_autofocus = 1

" Disable visualbell
set noerrorbells visualbell t_vb=
if has('autocmd')
  autocmd GUIEnter * set visualbell t_vb=
endif

"" Copy/Paste/Cut
if has('unnamedplus')
  set clipboard=unnamed,unnamedplus
endif

noremap YY "+y<CR>
noremap <leader>p "+gP<CR>
noremap XX "+x<CR>

"" Clean search (highlight)
nnoremap <silent> <leader><space> :noh<cr>

"" Switching windows
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l
noremap <C-h> <C-w>h

"" Vmap for maintain Visual Mode after shifting > and <
vmap < <gv
vmap > >gv

"" Move visual block
vnoremap J :m '>+1<CR>gv=gv
vnoremap K :m '<-2<CR>gv=gv

"" Open current line on GitHub
nnoremap <Leader>o :.Gbrowse<CR>

" Enable mouse for vim
set mouse=a

" Close window on strg+q in normal mode
nnoremap <c-q> :bd<cr>

" Set color scheme
colorscheme molokai

" Save on strg+s if not in paste mode
nmap <c-s> :w<CR>
vmap <c-s> <Esc><c-s>gv
imap <c-s> <Esc><c-s>

" Strg+d to replace word under cursor
nnoremap <c-d> :%s/\<<C-r><C-w>\>//g<Left><Left>

" Strg+f ro find word under cursor
nnoremap <c-f> :/<C-r><C-w><Left><Left>

" Toggle location list
nmap <silent> <F4> :call ToggleList("Location List", 'l')<CR>

" Tab and shift+Tab cycle through suggestions
inoremap <silent><expr> <Tab> pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <silent><expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-TAB>"

"*****************************************************************************
"" Language Servers
"*****************************************************************************

" Ale language server
let g:ale_linters = {
        \ 'sh' : ['shellcheck'],
        \ 'ansible' : ['ansible-lint'],
        \ 'nix' : ['nix'],
        \ 'nasm' : ['nasm'],
        \ 'python': ['pyls'],
        \ 'json' : ['jsonlint'],
        \ 'c'    : ['ccls'],
        \ 'cpp'  : ['ccls'],
        \ 'rust' : ['analyzer', 'rls'],
        \ 'typescriptreact': ['tsserver'],
        \ 'vue':['vls']
    \ }

" Only run linters named in ale_linters settings.
let g:ale_linters_explicit = 1

" Enable ale completion
let g:ale_completion_enabled = 1

" ALE fixers
let g:ale_fixers = { '*': ['remove_trailing_lines', 'trim_whitespace'] }
let g:ale_fixers.python = ['black']
let g:ale_fixers.go = ['gofmt']
let g:ale_fixers.c = ['clang-format']
let g:ale_fixers.cpp = ['clang-format']
let g:ale_fixers.json = ['jq']
let g:ale_fixers.xml = ['xmllint']
let g:ale_fixers.rust = ['rustfmt']
let g:ale_fixers.typescriptreact = ['prettier']

" Code jumping
nmap <silent> <leader>d :ALEGoToDefinition -vsplit<CR>
nmap <silent> <leader>t :ALEGoToTypeDefinition -vsplit<CR>
nmap <silent> <leader>s :ALESymbolSearch<CR>
nmap <silent> <leader>r :ALERename<CR>
nmap <silent> <leader>f :ALEFindReferences<CR>

" F7 for reintendation
nmap <silent><F7> <Plug>(ale_fix)

"*****************************************************************************
"" Shortcuts overview
"*****************************************************************************
" Custom Commands
":FixWhitespace --> Removes trailing whitespaces

" Shortcuts Overview
" F3  --> Function overview
" F4  --> Toggle error bar
" F7  --> Format and lint file
" ,s  --> Symbol search
" ,t  --> Show type definition
" ,d  --> Show definition
" ,f  --> Find references
" K   --> Show documentation
" ,#  --> Change current file with fzf search
" ,b  --> Search open buffers with fzf
" ,y  --> Search shell history for commands
" ,e  --> Change current file
" ,te --> Open file in new tab
" u   --> Undo
" strg+r --> Redo
" strg+f --> Find current selected word
" strg+d --> Replace current selected word
" strg+s --> Save file
" strg+q --> Close current file
" space+, --> Stop highlighting words after search

" Git Shortcuts
" ,ga :Gwrite
" ,gc :Gcommit
" ,gsh :Gpush
" ,gll :Gpull
" ,gs :Gstatus
" ,gb :Gblame
" ,gd :Gvdiff
" ,gr :Gremove
